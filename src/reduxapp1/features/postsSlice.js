import {createAsyncThunk, createEntityAdapter, createSelector, createSlice} from '@reduxjs/toolkit';
import axios from "axios";
import {addMinutes} from 'date-fns';

//replaced with createEntityAdapter
// const normalize = (payload) => {
//     return payload.reduce((byId, prop) => {
//         byId[prop.id] = prop
//         return byId
//     }, {})
// }

const postsAdapter = createEntityAdapter({
    sortComparer: (a, b) => a.title.localeCompare(b.title)
});
const initialState = postsAdapter.getInitialState({
    status: 'idle',
    error: null
});

const postsSlice = createSlice({
    name: "posts",
    // initialState: [
        // {id: 1, title: "First post", content: 'Hello',
        //     timestamp: sub(new Date(), {minutes: 10}).toISOString(),
        //     reactions: {thumbsUp: 0, hooray: 0, heart: 0, rocket: 0, eyes: 0}
        // },
        // {id: 2, title: "Second post", content: 'Hello again',
        //     timestamp: sub(new Date(), {minutes: 5}).toISOString(),
        //     reactions: {thumbsUp: 0, hooray: 0, heart: 0, rocket: 0, eyes: 0}
        // }
    // ],
    initialState,
    reducers: {
        /*savePost: {
            reducer(state, action){
                console.log(action);
                state.posts.push(action.payload);
            },
            prepare(title, content, user){
                return {
                    payload: {
                        id: nanoid(),
                        title,
                        content,
                        user,
                        timestamp: new Date().toISOString(),
                        reactions: {thumbsUp: 0, hooray: 0, heart: 0, rocket: 0, eyes: 0}
                    }
                }
            }
        },*/
        updatePost: (state, action) => {
            const { id, title, content } = action.payload;
            const editPost = state.entities[id];
            if(editPost){
                editPost.title = title;
                editPost.content = content
            }
        },
        deletePost: (state, {payload}) => {
            // state.posts.splice(state.entities.findIndex(p => String(p.id) === String(action.payload)), 1);
            //@todo test delete
            delete state.entities[payload];
        },
        reactionUpdate: (state, {payload}) => {
            const {id, name} = payload;
            const existingPost = state.entities[id];
            if(existingPost){
                existingPost.reactions[name]++
            }
        },
    },
    extraReducers(builder) {
        builder
            .addCase(fetchPosts.pending, (state, action) => {
                // console.log('loading');
                state.status = 'loading'
            })
            .addCase(fetchPosts.fulfilled, (state, action) => {
                // console.log('success');
                state.status = 'success';
                const posts = action.payload.slice();
                posts.forEach((p, i) => {
                    p.timestamp = (addMinutes(new Date, i * 5)).toISOString();
                    p.reactions = {thumbsUp: 0, hooray: 0, heart: 0, rocket: 0, eyes: 0}
                });
                // replaced with createEntityAdapter
                // const normalized = normalize(posts);
                // state.posts = state.posts.concat(posts);
                postsAdapter.upsertMany(state, posts);
            })
            .addCase(fetchPosts.rejected, (state, action) => {
                state.status = 'fail'
                state.error = action.error.message
            });

        builder
            .addCase(savePost.fulfilled, postsAdapter.addOne)
    }
})

// replaced with autogenerated functions from postsAdapter
// export const selectAllPosts = state => state.posts.posts;
// export const selectPostById = (state, id) => {
//     if(id){
//         return state.posts.posts.find(p => {
//             return Number(p.id) === Number(id);
//         })
//     } else {
//         return null
//     }
// }
//replaced with memoized funciton - using toolkit reselect library: createSelector
// export const selectPostsByUser = (state, userId) => {
//     if(userId){
//         return state.posts.posts.filter(p => Number(p.userId) === Number(userId));
//     } else {
//         return null
//     }
// }

export const {
    selectAll: selectAllPosts,
    selectById: selectPostById,
    selectIds: selectPostIds
    // Pass in a selector that returns the posts slice of state
} = postsAdapter.getSelectors(state => state.posts);

export const selectPostsByUser = createSelector(
    // selectors: arguments are passed to each of them from above function when invoked
    [selectAllPosts, (state, userId) => userId],
    // below arguments are output of above selector functions
    (posts, userId) => posts.filter(p => p.userId.toString() === userId.toString())
)

export const savePost = createAsyncThunk('posts/savePost', async post => {
    try {
        const fetch = (post) => {
            return new Promise((res) => {
                setTimeout(() => {
                    res({
                        ...post,
                        timestamp: new Date().toISOString()
                    })
                }, 1500);
            })
        }
        return await fetch(post);
    } catch(e) {
        console.log(e);
    }
})

export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {
    try {
        const res = await axios.get('https://jsonplaceholder.typicode.com/posts');
        return res.data;
    } catch(e) {
        console.log(e);
    }
})

export const { updatePost, deletePost, reactionUpdate } = postsSlice.actions;

export default postsSlice.reducer;
